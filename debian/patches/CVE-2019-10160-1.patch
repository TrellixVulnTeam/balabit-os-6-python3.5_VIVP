From e5f9f4adb95233c66578e6f7ea176687af2f78ca Mon Sep 17 00:00:00 2001
From: "Miss Islington (bot)"
 <31488909+miss-islington@users.noreply.github.com>
Date: Thu, 2 May 2019 09:02:35 -0700
Subject: [PATCH] bpo-36742: Fixes handling of pre-normalization characters in
 urlsplit() (GH-13017) (GH-13024)

(cherry picked from commit d537ab0ff9767ef024f26246899728f0116b1ec3)

Co-authored-by: Steve Dower <steve.dower@python.org>
---
 Lib/test/test_urlparse.py                             |  6 ++++++
 Lib/urllib/parse.py                                   | 11 +++++++----
 .../Security/2019-04-29-15-34-59.bpo-36742.QCUY0i.rst |  1 +
 3 files changed, 14 insertions(+), 4 deletions(-)
 create mode 100644 Misc/NEWS.d/next/Security/2019-04-29-15-34-59.bpo-36742.QCUY0i.rst

Index: python3.5-3.5.2/Lib/test/test_urlparse.py
===================================================================
--- python3.5-3.5.2.orig/Lib/test/test_urlparse.py	2019-07-10 07:55:11.740723535 -0400
+++ python3.5-3.5.2/Lib/test/test_urlparse.py	2019-07-10 07:55:11.736723519 -0400
@@ -978,6 +978,12 @@ class UrlParseTestCase(unittest.TestCase
         self.assertIn('\u2100', denorm_chars)
         self.assertIn('\uFF03', denorm_chars)
 
+        # bpo-36742: Verify port separators are ignored when they
+        # existed prior to decomposition
+        urllib.parse.urlsplit('http://\u30d5\u309a:80')
+        with self.assertRaises(ValueError):
+            urllib.parse.urlsplit('http://\u30d5\u309a\ufe1380')
+
         for scheme in ["http", "https", "ftp"]:
             for c in denorm_chars:
                 url = "{}://netloc{}false.netloc/path".format(scheme, c)
Index: python3.5-3.5.2/Lib/urllib/parse.py
===================================================================
--- python3.5-3.5.2.orig/Lib/urllib/parse.py	2019-07-10 07:55:11.740723535 -0400
+++ python3.5-3.5.2/Lib/urllib/parse.py	2019-07-10 07:55:11.740723535 -0400
@@ -324,13 +324,16 @@ def _checknetloc(netloc):
     # looking for characters like \u2100 that expand to 'a/c'
     # IDNA uses NFKC equivalence, so normalize for this check
     import unicodedata
-    netloc2 = unicodedata.normalize('NFKC', netloc)
-    if netloc == netloc2:
+    n = netloc.rpartition('@')[2] # ignore anything to the left of '@'
+    n = n.replace(':', '')        # ignore characters already included
+    n = n.replace('#', '')        # but not the surrounding text
+    n = n.replace('?', '')
+    netloc2 = unicodedata.normalize('NFKC', n)
+    if n == netloc2:
         return
-    _, _, netloc = netloc.rpartition('@') # anything to the left of '@' is okay
     for c in '/?#@:':
         if c in netloc2:
-            raise ValueError("netloc '" + netloc2 + "' contains invalid " +
+            raise ValueError("netloc '" + netloc + "' contains invalid " +
                              "characters under NFKC normalization")
 
 def urlsplit(url, scheme='', allow_fragments=True):
